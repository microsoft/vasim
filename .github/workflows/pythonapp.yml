# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

  schedule:  # Run the pipeline every friday afternoon to make sure no package is broken
    - cron: "15 21 * * FRI"

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build:

    env:
      MAIN_PYTHON_VERS: '3.10'

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # TODO: We will keep this simple for now. We will add more versions later.
        os: [ubuntu-22.04]
        python-version: ['3.9', '3.10']
        #os: [ubuntu-24.04, macos-14, windows-2022]
        #python-version: ['3.9', '3.10', '3.11']
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Update pip
      run: |
        python -m pip install --upgrade pip

    - name: Install basic and test dependencies
      run: |
        python -m pip install -e .[dev]

    - name: Check formating and linting with pre-commit hooks
      if: ${{ matrix.python-version == env.MAIN_PYTHON_VERS }}
      run: |
        python -m pip install pre-commit
        pre-commit run --all-files
        git diff --exit-code

    - name: Tests with coverage reporting
      run : |
        # Run tests in parallel with coverage (configured via pyproject.toml)
        pytest
    - name: Test notebooks
      run: |
        python -m pip install jupyter
        find . -name '*.ipynb' -print0 | xargs -0 -n1 -P0 python -m jupyter execute
        if [ $? != 0 ]; then
          echo "ERROR: Notebooks execution failed." >&2
          exit 1
        else
          echo "Notebooks executed successfully."
        fi
    - name: Upload coverage to Codecov
      if: ${{ matrix.python-version == env.MAIN_PYTHON_VERS }}
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Test build whl
      run: |
        python -m pip install build
        python -m build
        if ! unzip -p dist/vasim-*-py3-none-any.whl "vasim*/METADATA" | grep CONTRIBUTING.md | grep github.com/microsoft/vasim/tree/; then
          echo "ERROR: CONTRIBUTING.md link not found in METADATA file of wheel."
          exit 1
        fi
    - name: Test pip install whl
      run: |
        python -m venv test-install-venv
        source test-install-venv/bin/activate
        whl_file=$(ls -1 dist/vasim-*.whl)
        test $(echo "$whl_file" | wc -l) -eq 1 || { echo "Error: Incorrect number of wheel files found: '$whl_file'"; exit 1; }
        python -m pip install "$whl_file[dev]"
        # Run a single basic test that uses the package modules.
        grep -q '^from vasim.recommender' tests/test_metrics_data_window.py
        grep -q '^from vasim.simulator' tests/test_metrics_data_window.py
        pytest --no-cov -n0 tests/test_metrics_data_window.py
        deactivate

  # TODO: set this up later too. It needs to be in a separate block below due to the permissions
  # page-build:
  #   needs: build
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-22.04]
  #       python-version: ['3.9']
  #   permissions: # here we push documentation
  #     actions: read
  #     contents: write
  #   if: github.ref == 'refs/heads/main' # only run this on main after PR merged
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Generate Documentation
  #     run: |
  #       make sphinx-site -C website/
  #       # now refresh the code
  #       git checkout . && python -m pip install -e .[dev]
  #   - name: Deploy to GitHub pages ðŸš€
  #     uses: JamesIves/github-pages-deploy-action@v4.4.1
  #     with:
  #       branch: gh-pages
  #       folder: website/public

